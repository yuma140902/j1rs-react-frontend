/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 半自動センサー校正器「コウセイくん☆」Web API
 * 情報工学実験1A 実世界センシングで作成した半自動センサー校正器「コウセイくん☆」のWeb APIです。このWeb APIを利用することにより、Webページ、LINE、Discordなど様々なフロントエンドからコウセイくん☆を利用することができます。
 *
 * OpenAPI spec version: 1.0.0
 * Contact: yuma140902@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface MBody
 */
export interface MBody {
    /**
     * 
     * @type {number}
     * @memberof MBody
     */
    index: number;
    /**
     * 
     * @type {number}
     * @memberof MBody
     */
    value: number;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary m_iの入力を終了してフィッティングを開始する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donePost(options: any = {}): FetchArgs {
            const localVarPath = `/done`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary サーバー(コウセイくん☆)が正常に動作していれば\"OK\"を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options: any = {}): FetchArgs {
            const localVarPath = `/health`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary m_iを追加する
         * @param {MBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mPost(body?: MBody, options: any = {}): FetchArgs {
            const localVarPath = `/m`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary モデル式m=f(V)を指定する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelPut(options: any = {}): FetchArgs {
            const localVarPath = `/model`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 校正のための一連の処理を開始する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPost(options: any = {}): FetchArgs {
            const localVarPath = `/start`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary m_iの入力を終了してフィッティングを開始する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donePost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).donePost(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary サーバー(コウセイくん☆)が正常に動作していれば\"OK\"を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).healthGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary m_iを追加する
         * @param {MBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mPost(body?: MBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary モデル式m=f(V)を指定する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelPut(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).modelPut(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 校正のための一連の処理を開始する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).startPost(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary m_iの入力を終了してフィッティングを開始する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        donePost(options?: any) {
            return DefaultApiFp(configuration).donePost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary サーバー(コウセイくん☆)が正常に動作していれば\"OK\"を返す
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: any) {
            return DefaultApiFp(configuration).healthGet(options)(fetch, basePath);
        },
        /**
         * 
         * @summary m_iを追加する
         * @param {MBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mPost(body?: MBody, options?: any) {
            return DefaultApiFp(configuration).mPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary モデル式m=f(V)を指定する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modelPut(options?: any) {
            return DefaultApiFp(configuration).modelPut(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 校正のための一連の処理を開始する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startPost(options?: any) {
            return DefaultApiFp(configuration).startPost(options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary m_iの入力を終了してフィッティングを開始する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public donePost(options?: any) {
        return DefaultApiFp(this.configuration).donePost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary サーバー(コウセイくん☆)が正常に動作していれば\"OK\"を返す
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: any) {
        return DefaultApiFp(this.configuration).healthGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary m_iを追加する
     * @param {MBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mPost(body?: MBody, options?: any) {
        return DefaultApiFp(this.configuration).mPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary モデル式m=f(V)を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public modelPut(options?: any) {
        return DefaultApiFp(this.configuration).modelPut(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 校正のための一連の処理を開始する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startPost(options?: any) {
        return DefaultApiFp(this.configuration).startPost(options)(this.fetch, this.basePath);
    }

}
