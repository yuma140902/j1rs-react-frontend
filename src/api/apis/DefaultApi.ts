/* tslint:disable */
/* eslint-disable */
/**
 * 半自動センサー校正器「コウセイくん☆」Web API
 * 情報工学実験1A 実世界センシングで作成した半自動センサー校正器「コウセイくん☆」のWeb APIです。このWeb APIを利用することにより、Webページ、LINE、Discordなど様々なフロントエンドからコウセイくん☆を利用することができます。
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: yuma140902@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DoneResponse,
  MRequest,
  MResponse,
  ModelRequest,
  ModelResponse,
} from '../models/index';
import {
    DoneResponseFromJSON,
    DoneResponseToJSON,
    MRequestFromJSON,
    MRequestToJSON,
    MResponseFromJSON,
    MResponseToJSON,
    ModelRequestFromJSON,
    ModelRequestToJSON,
    ModelResponseFromJSON,
    ModelResponseToJSON,
} from '../models/index';

export interface PostMRequest {
    mRequest?: MRequest;
}

export interface PutModelRequest {
    modelRequest?: ModelRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * サーバー(コウセイくん☆)が正常に動作していれば\"OK\"を返す
     */
    async getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * サーバー(コウセイくん☆)が正常に動作していれば\"OK\"を返す
     */
    async getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getHealthRaw(initOverrides);
    }

    /**
     * 
     * m_iの入力を終了してフィッティングを開始する
     */
    async postDoneRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DoneResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/done`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoneResponseFromJSON(jsonValue));
    }

    /**
     * 
     * m_iの入力を終了してフィッティングを開始する
     */
    async postDone(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DoneResponse> {
        const response = await this.postDoneRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * m_iを追加する
     */
    async postMRaw(requestParameters: PostMRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/m`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MRequestToJSON(requestParameters.mRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MResponseFromJSON(jsonValue));
    }

    /**
     * 
     * m_iを追加する
     */
    async postM(requestParameters: PostMRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MResponse> {
        const response = await this.postMRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 校正のための一連の処理を開始する
     */
    async postStartRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * 校正のための一連の処理を開始する
     */
    async postStart(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postStartRaw(initOverrides);
    }

    /**
     * 
     * モデル式m=f(V)を指定する
     */
    async putModelRaw(requestParameters: PutModelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/model`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelRequestToJSON(requestParameters.modelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelResponseFromJSON(jsonValue));
    }

    /**
     * 
     * モデル式m=f(V)を指定する
     */
    async putModel(requestParameters: PutModelRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelResponse> {
        const response = await this.putModelRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
